//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.05.01 at 10:47:43 AM WEST 
//

package pt.jma.orchestration.activity.config;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder = { "target", "binds", "forwards" })
public class ActionType {

	@XmlAttribute(required = false)
	protected String event;

	public String getEvent() {
		return event;
	}

	public void setEvent(String event) {
		this.event = event;
	}

	@XmlElement(required = true, namespace = "urn:pt.jma.orchestration.activity")
	protected TargetType target;

	@XmlElement(required = false, namespace = "urn:pt.jma.orchestration.activity")
	protected BindsType binds;

	@XmlElementWrapper(name = "forwards", namespace = "urn:pt.jma.orchestration.activity")
	@XmlElement(name = "forward", type = ForwardType.class, namespace = "urn:pt.jma.orchestration.activity")
	protected List<ForwardType> forwards;

	public List<ForwardType> getForwards() {
		if (forwards == null) {
			forwards = new ArrayList<ForwardType>();
		}
		return this.forwards;
	}

	@XmlTransient
	private Map<String, ForwardType> forwardMap = null;

	public Map<String, ForwardType> getForwardMap() throws Exception {

		if (forwardMap == null) {

			this.forwardMap = new HashMap<String, ForwardType>();

			if (!this.getForwards().isEmpty()) {

				ForwardType[] forwardTypes = this.forwards.toArray(new ForwardType[this.forwards.size()]);

				for (ForwardType forwardType : forwardTypes) {
					forwardMap.put(forwardType.outcome, forwardType);
				}
			}
		}

		return forwardMap;

	}

	@XmlAttribute
	protected String name;
	@XmlAttribute
	protected String service;

	/**
	 * Gets the value of the target property.
	 * 
	 * @return possible object is {@link TargetType }
	 * 
	 */
	public TargetType getTarget() {
		return target;
	}

	/**
	 * Sets the value of the target property.
	 * 
	 * @param value
	 *            allowed object is {@link TargetType }
	 * 
	 */
	public void setTarget(TargetType value) {
		this.target = value;
	}

	/**
	 * Gets the value of the binds property.
	 * 
	 * @return possible object is {@link BindsType }
	 * 
	 */
	public BindsType getBinds() {
		return binds;
	}

	/**
	 * Sets the value of the binds property.
	 * 
	 * @param value
	 *            allowed object is {@link BindsType }
	 * 
	 */
	public void setBinds(BindsType value) {
		this.binds = value;
	}

	/**
	 * Gets the value of the name property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the value of the name property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setName(String value) {
		this.name = value;
	}

	/**
	 * Gets the value of the service property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getService() {
		return service;
	}

	/**
	 * Sets the value of the service property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setService(String value) {
		this.service = value;
	}

}
